% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/concaveman.R
\name{concaveman}
\alias{concaveman}
\title{A very fast 2D concave hull algorithm}
\usage{
concaveman(x, y = NULL, concavity = 2, lengthThreshold = 0)
}
\arguments{
\item{x, y}{coordinate vectors of points. This can be specified as two vectors x and y, a 2-column
matrix x, a list x with two components, etc.}

\item{concavity}{numeric a relative measure of concavity. 1 results in a relatively detailed shape,
Infinity results in a convex hull. You can use values lower than 1, but they can produce pretty crazy
shapes.}

\item{lengthThreshold}{numeric. when a segment length is under this threshold, it stops being
considered for further detalization. Higher values result in simpler shapes.}
}
\description{
The algorithm is based on ideas from Park and Oh (2012). A first implementation in JavaScript was
proposed by Vladimir Agafonkin in \href{https://github.com/mapbox/concaveman}{mapbox}. This
implementation dramatically improved performance over the one stated in the paper using a spatial
index. The algorithm was then ported to R by JoÃ«l Gombin in the R package
\href{https://github.com/joelgombin/concaveman}{concaveman} that runs the JavaScript implemetation
proposed by Vladimir Agafonkin. Later a C++ version of Vladimir Agafonkin's JavaScript implementation
was proposed by Stanislaw Adaszewski in \href{https://github.com/sadaszewski/concaveman-cpp}{concaveman-cpp}.
The concaveman function in RcppConcaveman package wraps the Stanislaw Adaszewski's C++ code making
the concaveman algorithm an order of magnitude (up to 50 times) faster than the Javascript version.
}
\examples{
data(points)
hull <- concaveman(points)
plot(points, asp = 1)
lines(hull, lwd = 3, col = "red")
}
\references{
Park, J.-S & Oh, S.-J. (2013). A New Concave Hull Algorithm and Concaveness Measure
for n-dimensional Datasets. Journal of Information Science and Engineering. 29. 379-392.
}
